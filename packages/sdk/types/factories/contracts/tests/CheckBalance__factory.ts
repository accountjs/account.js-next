/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CheckBalance,
  CheckBalanceInterface,
} from "../../../contracts/tests/CheckBalance";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "balanceRequired",
        type: "uint256",
      },
    ],
    name: "CheckedBalance",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balanceRequired",
        type: "uint256",
      },
    ],
    name: "checkEthers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610121806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635f460abe14602d575b600080fd5b603c603836600460d3565b603e565b005b604080513380825260208201849052917f613cde218aeb65184f884840e6509403610bc191e21723ecb55f86147510c19d910160405180910390a181816001600160a01b031631101560cf5760405162461bcd60e51b815260206004820152601660248201527542616c616e6365206973206e6f7420656e6f7567682160501b604482015260640160405180910390fd5b5050565b60006020828403121560e457600080fd5b503591905056fea264697066735822122050be966297e7042a4306feec7184f2d3c6e45146a59bd790032d3963ab14647b64736f6c634300080f0033";

type CheckBalanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheckBalanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CheckBalance__factory extends ContractFactory {
  constructor(...args: CheckBalanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CheckBalance> {
    return super.deploy(overrides || {}) as Promise<CheckBalance>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CheckBalance {
    return super.attach(address) as CheckBalance;
  }
  override connect(signer: Signer): CheckBalance__factory {
    return super.connect(signer) as CheckBalance__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckBalanceInterface {
    return new utils.Interface(_abi) as CheckBalanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CheckBalance {
    return new Contract(address, _abi, signerOrProvider) as CheckBalance;
  }
}
